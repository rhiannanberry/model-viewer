{"version":3,"file":"utils-spec.js","sourceRoot":"","sources":["../../src/test/utils-spec.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAE3C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAE3E,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;IAClB,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC3B,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC9D,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;YAEjC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BoxBufferGeometry, Mesh, Box3, Vector3} from 'three';\n\nimport {deserializeUrl} from '../utils.js';\n\nconst expect = chai.expect;\n\nconst timePasses = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nsuite('utils', () => {\n  suite('deserializeUrl', () => {\n    test('returns a string given a string', () => {\n      expect(deserializeUrl('foo')).to.be.a('string');\n    });\n\n    test('returns null given a null-ish value', () => {\n      expect(deserializeUrl(null)).to.be.equal(null);\n    });\n\n    test('yields a url on the same origin for relative paths', () => {\n      const {origin} = window.location;\n\n      expect(deserializeUrl('foo').indexOf(origin)).to.be.equal(0);\n    });\n  });\n});\n"]}