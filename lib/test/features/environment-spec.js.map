{"version":3,"file":"environment-spec.js","sourceRoot":"","sources":["../../../src/test/features/environment-spec.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EnvironmentMixin} from '../../features/environment.js';\nimport ModelViewerElementBase, {$scene} from '../../model-viewer-base.js';\nimport {assetPath, textureMatchesMeta, timePasses, waitForEvent} from '../helpers.js';\n\nconst expect = chai.expect;\nconst BG_IMAGE_URL = assetPath('equirectangular.png');\nconst MODEL_URL = assetPath('reflective-sphere.gltf');\n\nconst skysphereUsingMap =\n    (scene, url) => {\n      const material = scene.skysphere.material;\n      const color = material.color.getHexString();\n      return textureMatchesMeta(material.map, {url: url}) && color === 'ffffff';\n    }\n\nconst skysphereUsingColor =\n    (scene, hex) => {\n      const {color, map} = scene.skysphere.material;\n      // Invert gamma correct to match passed in hex\n      const gammaCorrectedColor = color.clone().convertLinearToGamma(2.2);\n\n      return map == null && gammaCorrectedColor.getHexString() === hex;\n    }\n\n/**\n * Takes a scene and a meta object and returns a\n * boolean indicating whether or not the scene's model has an\n * environment map applied that matches the meta object.\n *\n * @see textureMatchesMeta\n * @param {THREE.Scene} scene\n * @param {Object} meta\n */\nconst modelUsingEnvmap = (scene, meta) => {\n  let found = false;\n  scene.model.traverse(object => {\n    if (!object.material || !object.material.envMap) {\n      return;\n    }\n\n    if (textureMatchesMeta(object.material.envMap, meta)) {\n      found = true;\n    }\n  });\n  return found;\n};\n\n/**\n * Takes a model object and a meta object and returns\n * a promise that resolves when the model's environment map has\n * been set to a texture that has `userData` that matches\n * the passed in `meta`.\n *\n * @see textureMatchesMeta\n * @param {Model} model\n * @param {Object} meta\n */\nconst waitForEnvmap = (model, meta) => waitForEvent(\n    model,\n    'envmap-change',\n    e => textureMatchesMeta(e.value, {...meta, type: 'EnvironmentMap'}));\n\n/**\n * Returns a promise that resolves when a given element is loaded\n * and has an environment map set that matches the passed in meta.\n * @see textureMatchesMeta\n */\nconst waitForLoadAndEnvmap = (scene, element, meta) => Promise.all(\n    [waitForEvent(element, 'load'), waitForEnvmap(scene.model, meta)]);\n\nsuite('ModelViewerElementBase with EnvironmentMixin', () => {\n  let nextId = 0;\n  let tagName;\n  let ModelViewerElement;\n  let element;\n  let scene;\n\n  setup(() => {\n    tagName = `model-viewer-environment-${nextId++}`;\n    ModelViewerElement = class extends EnvironmentMixin\n    (ModelViewerElementBase) {\n      static get is() {\n        return tagName;\n      }\n    };\n    customElements.define(tagName, ModelViewerElement);\n    element = new ModelViewerElement();\n    scene = element[$scene];\n  });\n\n  teardown(() => element.parentNode && element.parentNode.removeChild(element));\n\n  test(\n      'has default skysphere if no background-image or background-color',\n      () => {\n        expect(skysphereUsingColor(scene, 'ffffff')).to.be.equal(true);\n      });\n\n  test(\n      'has default skysphere if no background-image or background-color when in DOM',\n      async () => {\n        document.body.appendChild(element);\n        await timePasses();\n        expect(skysphereUsingColor(scene, 'ffffff')).to.be.equal(true);\n      });\n\n  suite('with a background-image property', () => {\n    suite('and a src property', () => {\n      setup(async () => {\n        let onLoad = waitForLoadAndEnvmap(scene, element, {url: BG_IMAGE_URL});\n        element.src = MODEL_URL;\n        element.backgroundImage = BG_IMAGE_URL;\n        await onLoad;\n      });\n\n      test('displays skysphere with the correct map', async function() {\n        expect(skysphereUsingMap(scene, element.backgroundImage)).to.be.ok;\n      });\n\n      test('applies the image as an environment map', async function() {\n        expect(modelUsingEnvmap(scene, {\n          url: element.backgroundImage\n        })).to.be.ok;\n      });\n    });\n  });\n\n  suite('with a background-color property', () => {\n    suite('and a src property', () => {\n      setup(async () => {\n        let onLoad = waitForLoadAndEnvmap(scene, element, {url: null});\n        element.src = MODEL_URL;\n        element.backgroundColor = '#ff0077';\n        await onLoad;\n      });\n\n      test('displays skysphere with the correct color', async function() {\n        expect(skysphereUsingColor(scene, 'ff0077')).to.be.ok;\n      });\n\n      test('applies a generated environment map on model', async function() {\n        expect(modelUsingEnvmap(scene, {url: null})).to.be.ok;\n      });\n\n      test(\n          'displays skysphere with correct color after attaching to DOM',\n          async function() {\n            document.body.appendChild(element);\n            await timePasses();\n            expect(skysphereUsingColor(scene, 'ff0077')).to.be.ok;\n          });\n    });\n  });\n\n  suite('with background-color and background-image properties', () => {\n    setup(async () => {\n      let onLoad = waitForLoadAndEnvmap(scene, element, {url: BG_IMAGE_URL});\n      element.setAttribute('src', MODEL_URL);\n      element.setAttribute('background-color', '#ff0077');\n      element.setAttribute('background-image', BG_IMAGE_URL);\n      await onLoad;\n    });\n\n    test('displays skysphere with background-image', async function() {\n      expect(skysphereUsingMap(scene, element.backgroundImage)).to.be.ok;\n    });\n\n    test('applies background-image envmap on model', async function() {\n      expect(modelUsingEnvmap(scene, {url: element.backgroundImage})).to.be.ok;\n    });\n\n    suite('and background-image subsequently removed', () => {\n      setup(async () => {\n        let envmapChanged = waitForEnvmap(scene.model, {url: null});\n        element.removeAttribute('background-image');\n        await envmapChanged;\n      });\n\n      test('displays skysphere with background-color', async function() {\n        expect(skysphereUsingColor(scene, 'ff0077')).to.be.ok;\n      });\n\n      test('reapplies generated envmap on model', async function() {\n        expect(modelUsingEnvmap(scene, {url: null})).to.be.ok;\n      });\n    });\n  });\n});\n"]}