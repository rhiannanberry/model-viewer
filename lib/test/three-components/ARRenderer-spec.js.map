{"version":3,"file":"ARRenderer-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/ARRenderer-spec.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IS_AR_CANDIDATE} from '../../constants.js';\nimport ModelViewerElementBase, {$renderer, $scene} from '../../model-viewer-base.js';\nimport {ARRenderer} from '../../three-components/ARRenderer.js';\nimport ModelScene from '../../three-components/ModelScene.js';\nimport {$arRenderer} from '../../three-components/Renderer.js';\nimport {assetPath, waitForEvent} from '../helpers.js';\n\nconst expect = chai.expect;\n\ncustomElements.define('model-viewer-element', ModelViewerElementBase);\n\n\nconst stubWebXrInterface = (arRenderer) => {\n  arRenderer.resolveARSession = () => {\n    class FakeSession extends EventTarget {\n      requestFrameOfReference() {\n        return {};\n      }\n\n      requestAnimationFrame() {\n        return 1;\n      }\n\n      cancelAnimationFrame() {\n      }\n\n      end() {\n        this.dispatchEvent(new CustomEvent('end'));\n      }\n    }\n\n    return new FakeSession();\n  };\n};\n\nsuite('ARRenderer', () => {\n  let element;\n  let scene;\n  let renderer;\n  let arRenderer;\n\n  setup(() => {\n    element = new ModelViewerElementBase();\n    renderer = element[$renderer];\n    arRenderer = ARRenderer.fromInlineRenderer(renderer);\n  });\n\n  teardown(async () => {\n    renderer.scenes.clear();\n    await arRenderer.stopPresenting().catch(() => {});\n  });\n\n  // NOTE(cdata): It will be a notable day when this test fails\n  test('does not support presenting to AR on any browser', async () => {\n    expect(await arRenderer.supportsPresentation()).to.be.equal(false);\n  });\n\n  test('is not presenting if present has not been invoked', () => {\n    expect(arRenderer.isPresenting).to.be.equal(false);\n  });\n\n  suite('when presenting a scene', () => {\n    let modelScene;\n\n    if (!IS_AR_CANDIDATE) {\n      return;\n    }\n\n    setup(async () => {\n      element.src = assetPath('Astronaut.glb');\n      await waitForEvent(element, 'load');\n      modelScene = element[$scene];\n      stubWebXrInterface(arRenderer);\n    });\n\n    test('presents the model at its natural scale', async () => {\n      const model = modelScene.model;\n\n      await arRenderer.present(modelScene);\n\n      expect(model.scale.x).to.be.equal(1);\n      expect(model.scale.y).to.be.equal(1);\n      expect(model.scale.z).to.be.equal(1);\n    });\n\n    suite('presentation ends', () => {\n      test('restores the original model scale', async () => {\n        const model = modelScene.model;\n        const originalModelScale = model.scale.clone();\n\n        await arRenderer.present(modelScene);\n        await arRenderer.stopPresenting();\n\n        expect(originalModelScale.x).to.be.equal(model.scale.x);\n        expect(originalModelScale.y).to.be.equal(model.scale.y);\n        expect(originalModelScale.z).to.be.equal(model.scale.z);\n      });\n    });\n  });\n});\n"]}