{"version":3,"file":"loading.js","sourceRoot":"","sources":["../../src/features/loading.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAC,aAAa,EAAC,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,0CAA0C,CAAC;AAC3E,OAAO,EAAC,cAAc,EAAC,MAAM,aAAa,CAAC;AAE3C,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,qBAAqB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAE7D,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACjD,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACrD,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AACvC,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAEjD,MAAM,MAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAEvC,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,kBAAkB,EAAE,EAAE;IACjD,OAAO,KAAM,SAAQ,kBAAkB;QACrC,MAAM,KAAK,UAAU;YACnB,yBACK,KAAK,CAAC,UAAU,IACnB,MAAM,EAAE,EAAC,IAAI,EAAE,cAAc,EAAC,EAC9B,OAAO,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,EACxB,gBAAgB,EAAE,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,oBAAoB,EAAC,IAClE;QACJ,CAAC;QAED,IAAI,MAAM;YACR,OAAO,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,CAAC;QAED;YACE,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;YAE7B,gEAAgE;YAChE,sCAAsC;YACtC,IAAI,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;YAE7B,4DAA4D;YAC5D,kBAAkB;YAClB,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAEhE,4DAA4D;YAC5D,4DAA4D;YAC5D,WAAW;YACX,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,GAAE,IAAI,CAAC,aAAa,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,aAAa;YACX,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAED,UAAU;YACR,IAAI,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAED,IAAG,CAAC,iBAAiB,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,IAAG,CAAC,eAAe,CAAC;YAClB,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,CAAC,iBAAiB;YACtB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACxC,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;YAED,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAEhC,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE;gBAC3B,IAAI,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAC/C;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;oBACtD,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC;iBAC/B;gBAED,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC;oBACrE,IAAI,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBAC5C;aACF;QACH,CAAC;QAED,KAAK,CAAA,CAAC,qBAAqB,CAAC;YAC1B,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,EAAE;gBACjC,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC;aAC9B;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACb,OAAO;aACR;YAED,8CAA8C;YAC9C,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAM,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;YAE/C,8DAA8D;YAC9D,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAED,CAAC,aAAa,CAAC;YACb,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;gBAC5B,OAAO;aACR;YAED,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC;QACzB,CAAC;KACF,CAAC;AACJ,CAAC,CAAA","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {$updateSource} from '../model-viewer-base.js';\nimport {CachingGLTFLoader} from '../three-components/CachingGLTFLoader.js';\nimport {deserializeUrl} from '../utils.js';\n\nconst $posterElement = Symbol('posterElement');\nconst $applyPreloadStrategy = Symbol('applyPreloadStrategy');\n\nconst $revealDeferred = Symbol('revealDeferred');\nconst $dismissPoster = Symbol('dismissPoster');\nconst $shouldHidePoster = Symbol('shouldHidePoster');\nconst $preloaded = Symbol('preloaded');\nconst $preloadPromise = Symbol('preloadPromise');\n\nconst loader = new CachingGLTFLoader();\n\nexport const LoadingMixin = (ModelViewerElement) => {\n  return class extends ModelViewerElement {\n    static get properties() {\n      return {\n        ...super.properties,\n        poster: {type: deserializeUrl},\n        preload: {type: Boolean},\n        revealWhenLoaded: {type: Boolean, attribute: 'reveal-when-loaded'}\n      };\n    }\n\n    get loaded() {\n      return super.loaded || this[$preloaded];\n    }\n\n    constructor() {\n      super();\n\n      this[$preloaded] = false;\n      this[$preloadPromise] = null;\n\n      // Used to determine whether or not to display a poster image or\n      // to load the model if not preloaded.\n      this[$dismissPoster] = false;\n\n      // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n      this[$posterElement] = this.shadowRoot.querySelector('.poster');\n\n      // Fired when a user first clicks the model element. Used to\n      // change the visibility of a poster image, or start loading\n      // a model.\n      this.addEventListener('click', () => {this.dismissPoster()});\n    }\n\n    dismissPoster() {\n      this[$dismissPoster] = true;\n      this.requestUpdate();\n    }\n\n    showPoster() {\n      this[$dismissPoster] = false;\n      this.requestUpdate();\n    }\n\n    get[$shouldHidePoster]() {\n      return !this.poster || (this.loaded && this[$dismissPoster]);\n    }\n\n    get[$revealDeferred]() {\n      return !!this.preload && !this[$shouldHidePoster];\n    }\n\n    update(changedProperties) {\n      if (this.loaded && this.revealWhenLoaded) {\n        this.dismissPoster();\n      }\n\n      super.update(changedProperties);\n\n      if (this[$shouldHidePoster]) {\n        this[$posterElement].classList.remove('show');\n      } else {\n        if ((this.preload || this[$dismissPoster]) && this.src) {\n          this[$applyPreloadStrategy]();\n        }\n\n        if (this.poster) {\n          this[$posterElement].style.backgroundImage = `url(\"${this.poster}\")`;\n          this[$posterElement].classList.add('show');\n        }\n      }\n    }\n\n    async[$applyPreloadStrategy]() {\n      if (this[$preloadPromise] != null) {\n        return this[$preloadPromise];\n      }\n\n      if (!this.src) {\n        return;\n      }\n\n      // Only one strategy for now. Load right away:\n      this[$preloadPromise] = loader.load(this.src);\n      await this[$preloadPromise];\n      this[$preloaded] = true;\n      this.dispatchEvent(new CustomEvent('preload'));\n\n      // Once preloaded, we want to re-evaluate the element's state:\n      this.requestUpdate();\n    }\n\n    [$updateSource]() {\n      if (!this[$shouldHidePoster]) {\n        return;\n      }\n\n      super[$updateSource]();\n    }\n  };\n}\n"]}