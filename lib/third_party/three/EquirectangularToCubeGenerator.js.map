{"version":3,"file":"EquirectangularToCubeGenerator.js","sourceRoot":"","sources":["../../../src/third_party/three/EquirectangularToCubeGenerator.js"],"names":[],"mappings":"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","sourcesContent":["/**\n* @author Richard M. / https://github.com/richardmonette\n*/\n\nimport * as THREE from 'three';\n\nconst EquirectangularToCubeGenerator = function ( sourceTexture, options ) {\n\n\tthis.sourceTexture = sourceTexture;\n\tthis.resolution = options.resolution || 512;\n\n \tthis.views = [\n\t\t{ t: [ 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t{ t: [ - 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t{ t: [ 0, 1, 0 ], u: [ 0, 0, 1 ] },\n\t\t{ t: [ 0, - 1, 0 ], u: [ 0, 0, - 1 ] },\n\t\t{ t: [ 0, 0, 1 ], u: [ 0, - 1, 0 ] },\n\t\t{ t: [ 0, 0, - 1 ], u: [ 0, - 1, 0 ] },\n\t];\n\n\tthis.camera = new THREE.PerspectiveCamera( 90, 1, 0.1, 10 );\n\tthis.boxMesh = new THREE.Mesh( new THREE.BoxBufferGeometry( 1, 1, 1 ), this.getShader() );\n\tthis.boxMesh.material.side = THREE.BackSide;\n\tthis.scene = new THREE.Scene();\n\tthis.scene.add( this.boxMesh );\n\n\tvar params = {\n\t\tformat: options.format || this.sourceTexture.format,\n\t\tmagFilter: this.sourceTexture.magFilter,\n\t\tminFilter: this.sourceTexture.minFilter,\n\t\ttype: options.type || this.sourceTexture.type,\n\t\tgenerateMipmaps: this.sourceTexture.generateMipmaps,\n\t\tanisotropy: this.sourceTexture.anisotropy,\n\t\tencoding: this.sourceTexture.encoding\n\t};\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( this.resolution, this.resolution, params );\n\n};\n\nEquirectangularToCubeGenerator.prototype = {\n\n\tconstructor: EquirectangularToCubeGenerator,\n\n\tupdate: function ( renderer ) {\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tthis.renderTarget.activeCubeFace = i;\n\n\t\t\tvar v = this.views[ i ];\n\n\t\t\tthis.camera.position.set( 0, 0, 0 );\n\t\t\tthis.camera.up.set( v.u[ 0 ], v.u[ 1 ], v.u[ 2 ] );\n\t\t\tthis.camera.lookAt( v.t[ 0 ], v.t[ 1 ], v.t[ 2 ] );\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTarget, true );\n\n\t\t}\n\n\t\treturn this.renderTarget.texture;\n\n\t},\n\n\tgetShader: function () {\n\n\t\tvar shaderMaterial = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"equirectangularMap\": { value: this.sourceTexture },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec3 localPosition;\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tlocalPosition = position;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\n\\\n\t\t\t\tvarying vec3 localPosition;\\n\\\n\t\t\t\tuniform sampler2D equirectangularMap;\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvec2 EquirectangularSampleUV(vec3 v) {\\n\\\n\t\t\t    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\\n\\\n\t\t\t    uv *= vec2(0.1591, 0.3183); // inverse atan\\n\\\n\t\t\t    uv += 0.5;\\n\\\n\t\t\t    return uv;\\n\\\n\t\t\t\t}\\n\\\n\t\t\t\t\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 uv = EquirectangularSampleUV(normalize(localPosition));\\n\\\n\t\t\t\t\tgl_FragColor = texture2D(equirectangularMap, uv);\\n\\\n\t\t\t\t}\",\n\n\t\t\tblending: THREE.NoBlending\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeGenerator';\n\n\t\treturn shaderMaterial;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.boxMesh.geometry.dispose();\n\t\tthis.boxMesh.material.dispose();\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n};\n\nexport default EquirectangularToCubeGenerator;\n"]}