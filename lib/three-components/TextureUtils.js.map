{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cache, EventDispatcher, GammaEncoding, TextureLoader} from 'three';\n\nimport PatchedEquirectangularToCubeGenerator from './PatchedEquirectangularToCubeGenerator.js';\n\nimport EnvMapGenerator from './EnvMapGenerator.js';\n\n// Enable three's loader cache so we don't create redundant\n// Image objects to decode images fetched over the network.\nCache.enabled = true;\n\nconst loader = new TextureLoader();\nconst $cubeGenerator = Symbol('cubeGenerator');\nconst defaultConfig = {\n  cubemapSize: 1024,\n  synthesizedEnvmapSize: 512,\n};\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n  // 'Equirectangular', 'EnvironmentMap'\n  type: null,\n};\n\nexport default class TextureManager extends EventDispatcher {\n  /**\n   * @param {THREE.WebGLRenderer} renderer\n   * @param {?number} config.cubemapSize [1024]\n   * @param {?number} config.synthesizedEnvmapSize [512]\n   */\n  constructor(renderer, config = {}) {\n    super();\n    this.config = {...defaultConfig, ...config};\n    this.renderer = renderer;\n    this.envMapGenerator = new EnvMapGenerator(this.renderer);\n    this[$cubeGenerator] = null;\n  }\n\n  /**\n   * The texture returned here is from a WebGLRenderCubeTarget,\n   * which is not the same as a THREE.CubeTexture, and just what\n   * the current THREE.CubeCamera uses, and has the same effect\n   * when being used as an environment map.\n   *\n   * @param {THREE.Texture} texture\n   * @return {THREE.Texture}\n   */\n  equirectangularToCubemap(texture) {\n    // Use our \"patched\" generator due to three memory leak\n    // @see https://github.com/mrdoob/three.js/issues/15288\n    const generator = new PatchedEquirectangularToCubeGenerator(texture, {\n      resolution: this.config.cubemapSize,\n    });\n\n    generator.update(this.renderer);\n\n    const cubemap = generator.renderTarget.texture;\n    cubemap.dispose = () => {\n      generator.renderTarget.dispose();\n    };\n\n    cubemap.userData = {\n      ...userData,\n      ...({\n        url: texture.userData ? texture.userData.url : null,\n        type: 'EnvironmentMap',\n      })\n    };\n\n    // It's up to the previously served texture to dispose itself,\n    // and therefore the generator's render target.\n    this[$cubeGenerator] = generator;\n\n    return cubemap;\n  }\n\n  /**\n   * @param {string} url\n   * @return {Promise<THREE.Texture>}\n   */\n  async load(url) {\n    const texture = await new Promise(\n        (resolve, reject) => loader.load(url, resolve, undefined, reject));\n    texture.userData = {\n      ...userData,\n      ...({\n        url: url,\n        type: 'Equirectangular',\n      })\n    };\n\n    texture.encoding = GammaEncoding;\n    return texture;\n  }\n\n  /**\n   * @param {?number} size\n   * @return {THREE.Texture}\n   */\n  generateDefaultEnvMap(size) {\n    const mapSize = size || this.config.synthesizedEnvmapSize;\n    const texture = this.envMapGenerator.generate(mapSize);\n    texture.userData = {\n      ...userData,\n      ...({\n        type: 'EnvironmentMap',\n      })\n    };\n\n    return texture;\n  }\n\n  /**\n   * Returns a { equirect, cubemap } object with the textures\n   * accordingly, or null if cannot generate a texture from\n   * the URL.\n   *\n   * @see equirectangularToCubemap with regard to the THREE types.\n   * @param {string} url\n   * @return {Promise<Object|null>}\n   */\n  async toCubemapAndEquirect(url) {\n    let equirect, cubemap;\n    try {\n      equirect = await this.load(url);\n      cubemap = await this.equirectangularToCubemap(equirect);\n      return {equirect, cubemap};\n    } catch (e) {\n      if (equirect) {\n        equirect.dispose();\n      }\n      if (cubemap) {\n        cubemap.dispose();\n      }\n      return null;\n    }\n  }\n\n  dispose() {\n    this.envMapGenerator.camera.renderTarget.dispose();\n    this.envMapGenerator = null;\n    if (this[$cubeGenerator]) {\n      this[$cubeGenerator].dispose();\n      this[$cubeGenerator] = null;\n    }\n  }\n}\n"]}