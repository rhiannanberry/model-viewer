{"version":3,"file":"PatchedEquirectangularToCubeGenerator.js","sourceRoot":"","sources":["../../src/three-components/PatchedEquirectangularToCubeGenerator.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAGH,OAAO,eAAe,MAAM,wDAAwD,CAAC;AAErF,IAAI,aAAa,GAAG,EAAE,CAAC;AAEvB;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,OAAO,OAAO,qCAAsC,SACvD,eAAe;IACjB,YAAY,OAAO,EAAE,MAAM;QACzB,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEvB,IAAI,aAAa,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;SACtC;aAAM;YACL,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACjC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACnC,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SACtC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;QAC7E,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,gEAAgE;IAChE,8DAA8D;IAC9D,oEAAoE;IACpE,sEAAsE;IACtE,SAAS;QACP,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzB,aAAa,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;SAC1C;QACD,OAAO,aAAa,CAAC,MAAM,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cache, EventDispatcher, GammaEncoding, TextureLoader} from 'three';\nimport ParentGenerator from '../third_party/three/EquirectangularToCubeGenerator.js';\n\nlet resourceCache = {};\n\n/**\n * Each instance of EquirectangularToCubeGenerator creates a new camera,\n * scene and render target. Every time a scene/camera duo is rendered,\n * a new three.js WebGLRenderState is cached in the renderer, with no way\n * of draining, causing a memory leak. The render target isn't shareable\n * between textures either, as the caller of this function is responsible\n * for disposing the texture. To get around these constraints, create\n * new generators, but reuse the same camera and scene as to not generate\n * extra WebGLRenderStates in cache.\n *\n * Memory leaks in three.js generators issue:\n * @see https://github.com/mrdoob/three.js/issues/15288\n */\nexport default class PatchedEquirectangularToCubeGenerator extends\n    ParentGenerator {\n  constructor(texture, config) {\n    super(texture, config);\n\n    if (resourceCache.scene) {\n      this.scene = resourceCache.scene;\n      this.camera = resourceCache.camera;\n      this.boxMesh = resourceCache.boxMesh;\n    } else {\n      resourceCache.scene = this.scene;\n      resourceCache.camera = this.camera;\n      resourceCache.boxMesh = this.boxMesh;\n    }\n  }\n\n  update(renderer) {\n    this.boxMesh.material.uniforms.equirectangularMap.value = this.sourceTexture;\n    return super.update(renderer);\n  }\n\n  // If this is the first generator, stub out the getShader method\n  // so we don't create unnecessary shaders; we're continuing to\n  // reuse the same camera and scene after all. Necessary to overwrite\n  // the prototype since this is called in the parent class constructor.\n  getShader() {\n    if (!resourceCache.shader) {\n      resourceCache.shader = super.getShader();\n    }\n    return resourceCache.shader;\n  }\n}\n"]}