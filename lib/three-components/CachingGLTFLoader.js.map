{"version":3,"file":"CachingGLTFLoader.js","sourceRoot":"","sources":["../../src/three-components/CachingGLTFLoader.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,UAAU,MAAM,oCAAoC,CAAC;AAE5D,MAAM,cAAc,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IACtE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC;AAEH,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAExB,MAAM,OAAO,iBAAiB;IAC5B,MAAM,CAAC,GAAG,CAAC,GAAG;QACZ,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAG;QACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACnB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SAClD;QAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAElC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEzD,wDAAwD;QACxD,2DAA2D;QAC3D,qDAAqD;QACrD,oBAAoB;QACpB,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACtB,8DAA8D;gBAC9D,yCAAyC;gBACzC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC1B,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACnB,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;iBAC3C;YACH,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport GLTFLoader from '../third_party/three/GLTFLoader.js';\n\nconst loadWithLoader = (url, loader) => new Promise((resolve, reject) => {\n  loader.load(url, resolve, () => {}, reject);\n});\n\nconst cache = new Map();\n\nexport class CachingGLTFLoader {\n  static has(url) {\n    return cache.has(url);\n  }\n\n  constructor() {\n    this.loader = new GLTFLoader();\n  }\n\n  async load(url) {\n    if (!cache.has(url)) {\n      cache.set(url, loadWithLoader(url, this.loader));\n    }\n\n    const gltf = await cache.get(url);\n\n    const model = gltf.scene ? gltf.scene.clone(true) : null;\n\n    // Materials aren't cloned when cloning meshes; geometry\n    // and materials are copied by reference. This is necessary\n    // for the same model to be used twice with different\n    // environment maps.\n    if (model) {\n      model.traverse(object => {\n        // Set a high renderOrder while we're here to ensure the model\n        // always renders on top of the skysphere\n        object.renderOrder = 1000;\n        if (object.material) {\n          object.material = object.material.clone();\n        }\n      });\n    }\n\n    return model;\n  }\n}\n"]}