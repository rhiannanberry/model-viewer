{"version":3,"file":"ModelScene.js","sourceRoot":"","sources":["../../src/three-components/ModelScene.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AmbientLight, BackSide, Box3, Color, DirectionalLight, Mesh, MeshBasicMaterial, Object3D, PerspectiveCamera, Scene, SphereBufferGeometry, Vector3} from 'three';\n\nimport Model from './Model.js';\nimport StaticShadow from './StaticShadow.js';\n\n// Valid types for `setScaleType` -- 'framed' scales the model\n// so that it fits within its 2D plane nicely. 'lifesize' is\n// unaltered scaling and uses whatever size the model provides,\n// such that 1 unit === 1 meter, used in AR.\nexport const ScaleTypes = {\n  Framed: 'framed',\n  Lifesize: 'lifesize',\n};\nconst ScaleTypeNames = Object.keys(ScaleTypes).map(type => ScaleTypes[type]);\n\n// This (arbitrary) value represents the height of the scene in\n// meters. With a fixed dimension, we can scale everything accordingly\n// to fit within this space and properly frame the model within view.\n// For example, if the containing canvas is 800px x 400px, then the scene\n// would be 20m x 10m if FRAMED_HEIGHT === 10.\nexport const FRAMED_HEIGHT = 10;\n\n// The model is sized to the room, and if too perfect of a fit,\n// the front of the model becomes clipped by the near plane. Rather than\n// change the near plane or camera's position (if we wanted to implement a\n// visible \"room\" in the future where framing needs to be precise), we shrink\n// the model by a little bit so it's always slightly smaller than the room.\nexport const ROOM_PADDING_SCALE = 1.01;\n\n// Vertical field of view of camera, in degrees.\nconst FOV = 45;\nconst DPR = window.devicePixelRatio;\n\nconst $paused = Symbol('paused');\n\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport default class ModelScene extends Scene {\n  /**\n   * @param {ModelViewerElementBase} options.element\n   * @param {CanvasHTMLElement} options.canvas\n   * @param {number} options.width\n   * @param {number} options.height\n   * @param {THREE.WebGLRenderer} options.renderer\n   */\n  constructor({canvas, element, width, height, renderer}) {\n    super();\n\n    this.name = 'ModelScene';\n\n    this.onModelLoad = this.onModelLoad.bind(this);\n    this[$paused] = false;\n\n    this.element = element;\n    this.canvas = canvas;\n    this.context = canvas.getContext('2d');\n    this.renderer = renderer;\n    this.scaleType = ScaleTypes.Framed;\n\n    this.model = new Model();\n    this.shadow = new StaticShadow();\n    this.light = new AmbientLight(0xffffff, 1);\n    this.light.name = 'AmbientLight';\n\n    // This light is only for generating (fake) shadows\n    // and does not needed to be added to the scene.\n    // @see StaticShadow.js\n    this.shadowLight = new DirectionalLight(0xffffff, 0);\n    this.shadowLight.position.set(0, 10, 0);\n    this.shadowLight.name = 'ShadowLight';\n\n    this.camera = new PerspectiveCamera(FOV, this.aspect, 0.1, 1000);\n    this.camera.name = 'MainCamera';\n    this.camera.position.y = 5;\n    this.activeCamera = this.camera;\n    this.pivot = new Object3D();\n    this.pivot.name = 'Pivot';\n\n    const skysphereGeo = new SphereBufferGeometry(1, 32, 32);\n    const skysphereMat = new MeshBasicMaterial(\n        {side: BackSide, color: 0xffffff, depthTest: false, depthWrite: false});\n    this.skysphere = new Mesh(skysphereGeo, skysphereMat);\n    this.skysphere.name = 'Skysphere';\n\n    // Ensure the skysphere is rendered before anything else due to\n    // depthTest=false\n    this.skysphere.renderOrder = 1;\n\n    this.add(this.pivot);\n    this.add(this.light);\n    this.add(this.skysphere);\n    this.pivot.add(this.model);\n\n    this.isVisible = false;\n    this.isDirty = false;\n\n    this.roomBox = new Box3();\n    this.roomSize = new Vector3();\n    this.setSize(width, height);\n\n    this.model.addEventListener('model-load', this.onModelLoad);\n  }\n\n  get paused() {\n    return this[$paused];\n  }\n\n  pause() {\n    this[$paused] = true;\n  }\n\n  resume() {\n    this[$paused] = false;\n  }\n\n  /**\n   * Sets the model via URL.\n   *\n   * @param {String} source\n   */\n  async setModelSource(source) {\n    try {\n      await this.model.setSource(source);\n    } catch (e) {\n      throw new Error(\n          `Could not set model source to '${source}': ${e.message}`);\n    }\n  }\n\n  /**\n   * Receives the size of the 2D canvas element to make according\n   * adjustments in the scene.\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = Math.max(width, 1);\n      this.height = Math.max(height, 1);\n      this.aspect = this.width / this.height;\n      this.applyRoomSize();\n    }\n  }\n\n  /**\n   * Updates the 3D room and model scale based on the 2D\n   * dimensions for the encapsulating element.\n   */\n  applyRoomSize() {\n    this.canvas.width = this.width * DPR;\n    this.canvas.height = this.height * DPR;\n    this.canvas.style.width = `${this.width}px`;\n    this.canvas.style.height = `${this.height}px`;\n\n    // Use the room width as the room depth as well, since\n    // the model can rotate on its Y axis\n    const halfWidth = this.aspect * FRAMED_HEIGHT / 2;\n    this.roomBox.min.set(-halfWidth, 0, -halfWidth);\n    this.roomBox.max.set(halfWidth, FRAMED_HEIGHT, halfWidth);\n    this.roomBox.getSize(this.roomSize);\n\n    this.scaleModelToFitRoom();\n\n    // Now that the room has been scaled with width === depth,\n    // we may be able to reduce the depth so that the camera\n    // doesn't have to be so far back. This can only occur\n    // when the model is scale-limited on the Y axis, since\n    // otherwise, width === depth must be equal for rotation.\n    const modelSize = this.model.size;\n    if (modelSize.length() !== 0 && modelSize.y >= modelSize.x &&\n        modelSize.y >= modelSize.z) {\n      // Calculate the depth from before applying the padding\n      // @see ROOM_PADDING_SCALE\n      const depth = Math.max(modelSize.x, modelSize.z) * this.model.scale.z *\n          ROOM_PADDING_SCALE;\n      this.roomBox.max.z = depth / 2;\n      this.roomBox.min.z = depth / -2;\n      this.roomSize.z = depth;\n    }\n\n    // Position the camera such that the element is perfectly framed\n    this.camera.near =\n        (FRAMED_HEIGHT / 2) / Math.tan((FOV / 2) * Math.PI / 180);\n    this.camera.position.z = this.roomBox.max.z + this.camera.near;\n    this.camera.aspect = this.aspect;\n    this.camera.updateProjectionMatrix();\n\n    const skysphereSize =\n        Math.max(this.roomSize.x, this.roomSize.y, this.roomSize.z) * 2;\n    this.skysphere.scale.setScalar(skysphereSize);\n    this.skysphere.scale.z *= -1;\n\n    this.updateStaticShadow();\n  }\n\n  /**\n   * Returns the size of the corresponding canvas element.\n   * @return {Object}\n   */\n  getSize() {\n    return {width: this.width, height: this.height};\n  }\n\n  /**\n   * Scales the model to fit the enclosed room.\n   */\n  scaleModelToFitRoom() {\n    if (!this.model.hasModel() || this.model.size.length() === 0) {\n      return;\n    }\n\n    this.resetModelPose();\n\n    const roomSize = this.roomSize;\n    const modelSize = this.model.size;\n    const roomCenter = this.roomBox.getCenter(new Vector3());\n    const modelCenter = this.model.boundingBox.getCenter(new Vector3());\n\n    let scale = Math.min(\n        roomSize.x / modelSize.x,\n        roomSize.y / modelSize.y,\n        roomSize.z / modelSize.z);\n\n    // @see ROOM_PADDING_SCALE\n    scale /= ROOM_PADDING_SCALE;\n\n    modelCenter.multiplyScalar(scale);\n    this.model.scale.multiplyScalar(scale);\n    this.model.position.subVectors(roomCenter, modelCenter);\n  }\n\n  resetModelPose() {\n    this.model.position.set(0, 0, 0);\n    this.model.rotation.set(0, 0, 0);\n    this.model.scale.set(1, 1, 1);\n  }\n\n  /**\n   * Returns the current camera.\n   * @return {THREE.PerspectiveCamera}\n   */\n  getCamera() {\n    return this.activeCamera;\n  }\n\n  /**\n   * Sets the passed in camera to be used for rendering.\n   * @param {THREE.Camera}\n   */\n  setCamera(camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Called when the model's contents have loaded, or changed.\n   */\n  onModelLoad() {\n    this.applyRoomSize();\n    this.dispatchEvent({type: 'model-load'});\n  }\n\n  /**\n   * Called to update the shadow rendering when the room or model changes.\n   */\n  updateStaticShadow() {\n    if (!this.model.hasModel() || this.model.size.length() === 0) {\n      this.pivot.remove(this.shadow);\n      return;\n    }\n\n    // Remove and cache the current pivot rotation so that the shadow's\n    // capture is unrotated so it can be freely rotated when applied\n    // as a texture.\n    const currentRotation = this.pivot.rotation.y;\n    this.pivot.rotation.y = 0;\n\n    // Don't want the skysphere in the shadow shot\n    this.remove(this.skysphere);\n\n    this.shadow.position.set(0, 0, 0);\n    this.shadow.scale.x = this.roomSize.x;\n    this.shadow.scale.z = this.roomSize.z;\n\n    this.shadow.render(this.renderer.renderer, this, this.shadowLight);\n\n    // Lazily add the shadow so we're only displaying it once it has\n    // a generated texture.\n    this.pivot.add(this.shadow);\n    this.pivot.rotation.y = currentRotation;\n\n    // If model has vertical room, it'll be positioned at (0, 5, 0)\n    // and appear to be floating. This should be ultimately user-configurable,\n    // but for now, move the shadow to the bottom of the model if the\n    // element and model are width-bound.\n    const modelHeight = this.model.size.y * this.model.scale.y;\n    if (modelHeight < FRAMED_HEIGHT) {\n      this.shadow.position.y = (FRAMED_HEIGHT / 2) - modelHeight / 2\n    }\n\n    this.add(this.skysphere);\n  }\n}\n"]}